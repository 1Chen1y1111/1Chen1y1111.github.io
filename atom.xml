<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CavsCy&#39;s Blog</title>
  
  <subtitle>改变的确很难,但结果值得冒险</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-11-18T06:05:39.571Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>1Chen1y1111</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>前端模块化</title>
    <link href="http://example.com/2022/11/18/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/"/>
    <id>http://example.com/2022/11/18/%E5%89%8D%E7%AB%AF%E6%A8%A1%E5%9D%97%E5%8C%96/</id>
    <published>2022-11-18T06:03:28.000Z</published>
    <updated>2022-11-18T06:05:39.571Z</updated>
    
    <content type="html"><![CDATA[<p><strong>CommonJs</strong></p><p>CommonJs是一种JavaScript语言的模块化规范，它通常会在服务端的nodejs上使用，项目是由多个模块组成的，模块与模块之间的调用，需要各个模块有相同规范的API，这样一来在使用的过程中不会有那么多的学习成本，并且对于单个模块来说是类聚的。</p><p>在CommonJs的模块化规范中，每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等，对其他的模块都不可见。</p><span id="more"></span><p>CommonJs规范规定，每个模块内部，module变量代表当前模块。这个变量是一个对象，它的exports属性（module.exports)是对外的接口。加载某个模块，其实是加载该模块的module.exports属性。require方法用于加载模块。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//module-a.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//module-b.js</span></span><br><span class="line"><span class="keyword">var</span> ma = <span class="built_in">require</span>(<span class="string">&#x27;./module-a.js&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> b = ma.<span class="property">a</span> + <span class="number">2</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">b</span>:b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Es Module</strong></p><p>在Es Module中导出分为两种，单个导出(export)和默认导出(export default)，单个导出在导入时不像CommonJs一样直接把值全部导入进来了，Es Module中可以导入我想要的值，那么默认导出就是全部直接导入。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//导出变量</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//导出函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">test</span> = (<span class="params"></span>) =&gt; &#123;&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出多个</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line"><span class="keyword">const</span> age = <span class="number">22</span></span><br><span class="line"><span class="keyword">export</span> &#123;name,age&#125;</span><br></pre></td></tr></table></figure><p>export和export default 同时使用并不互相影响，只需要在导入的地方之一，如果文件里有混合导入，则必须先导入默认导出的，再导入当然导入的值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line"><span class="keyword">export</span> cosnt age = <span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">fn</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="attr">msg</span>:<span class="string">&#x27;今天天气真好&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Es Module使用的是import语法进行导入，如果要单个导入则必须使用花括号{}，花括号不代表解构赋值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//index.js</span><br><span class="line">export const name = &#x27;cny&#x27;</span><br><span class="line">export const age = 22</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">import &#123;name,age&#125; from &#x27;./index.js&#x27;</span><br><span class="line"></span><br><span class="line">//如果里面全是单个导入的情况下</span><br><span class="line">import * as all from &#x27;./index.js&#x27;</span><br><span class="line">console.log(all)  //&#123;name:&#x27;cny&#x27;,age:22&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;CommonJs&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;CommonJs是一种JavaScript语言的模块化规范，它通常会在服务端的nodejs上使用，项目是由多个模块组成的，模块与模块之间的调用，需要各个模块有相同规范的API，这样一来在使用的过程中不会有那么多的学习成本，并且对于单个模块来说是类聚的。&lt;/p&gt;
&lt;p&gt;在CommonJs的模块化规范中，每一个文件就是一个模块，拥有自己独立的作用域，变量，以及方法等，对其他的模块都不可见。&lt;/p&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>app.use重写</title>
    <link href="http://example.com/2022/11/16/Hooks1-2/"/>
    <id>http://example.com/2022/11/16/Hooks1-2/</id>
    <published>2022-11-16T07:40:30.000Z</published>
    <updated>2022-11-16T07:55:49.586Z</updated>
    
    <content type="html"><![CDATA[<p><strong>MyUse.ts</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">App</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; app &#125; <span class="keyword">from</span> <span class="string">&#x27;../main&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">Use</span> &#123;</span><br><span class="line">  <span class="attr">install</span>: <span class="function">(<span class="params">app: App, ...options: <span class="built_in">any</span>[]</span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> installList = <span class="keyword">new</span> <span class="title class_">Set</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title class_">MyUse</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Use</span>&gt;(<span class="attr">plugin</span>: T, ...<span class="attr">options</span>: <span class="built_in">any</span>[]) &#123;</span><br><span class="line">  <span class="keyword">if</span> (installList.<span class="title function_">has</span>(plugin)) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;has been registered&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    plugin.<span class="title function_">install</span>(app, ...options)</span><br><span class="line">    installList.<span class="title function_">add</span>(plugin)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>main.ts</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> app = <span class="title function_">createApp</span>(<span class="title class_">App</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">MyUse</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;./hooks/MyUse&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">MyUse</span>(<span class="title class_">Loading</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;MyUse.ts&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &amp;#123; &lt;span class=&quot;title class_&quot;&gt;App&lt;/span&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; app &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;../main&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Use&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;install&lt;/span&gt;: &lt;span class=&quot;function&quot;&gt;(&lt;span class=&quot;params&quot;&gt;app: App, ...options: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;[]&lt;/span&gt;) =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;void&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; installList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Set&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;MyUse&lt;/span&gt;&amp;lt;T &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Use&lt;/span&gt;&amp;gt;(&lt;span class=&quot;attr&quot;&gt;plugin&lt;/span&gt;: T, ...&lt;span class=&quot;attr&quot;&gt;options&lt;/span&gt;: &lt;span class=&quot;built_in&quot;&gt;any&lt;/span&gt;[]) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (installList.&lt;span class=&quot;title function_&quot;&gt;has&lt;/span&gt;(plugin)) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;has been registered&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    plugin.&lt;span class=&quot;title function_&quot;&gt;install&lt;/span&gt;(app, ...options)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    installList.&lt;span class=&quot;title function_&quot;&gt;add&lt;/span&gt;(plugin)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Hooks" scheme="http://example.com/categories/Hooks/"/>
    
    
    <category term="Hooks" scheme="http://example.com/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>自定义Vue3Loading插件</title>
    <link href="http://example.com/2022/11/16/Plugins1-1/"/>
    <id>http://example.com/2022/11/16/Plugins1-1/</id>
    <published>2022-11-16T07:35:14.000Z</published>
    <updated>2022-11-16T07:40:12.757Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Loading.ts</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="keyword">type</span> &#123; <span class="title class_">App</span>, <span class="title class_">VNode</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;./index.vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过createVNode转成Vnode</span></span><br><span class="line"><span class="keyword">import</span> &#123; createVNode, render &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">install</span>(<span class="params">app: App</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title class_">Vnode</span>: <span class="title class_">VNode</span> = <span class="title function_">createVNode</span>(<span class="title class_">Loading</span>)</span><br><span class="line">    <span class="title function_">render</span>(<span class="title class_">Vnode</span>, <span class="variable language_">document</span>.<span class="property">body</span>)</span><br><span class="line">    app.<span class="property">config</span>.<span class="property">globalProperties</span>.<span class="property">_loading</span> = &#123;</span><br><span class="line">      <span class="attr">show</span>: <span class="title class_">Vnode</span>.<span class="property">component</span>?.<span class="property">exposed</span>?.<span class="property">show</span>,</span><br><span class="line">      <span class="attr">hide</span>: <span class="title class_">Vnode</span>.<span class="property">component</span>?.<span class="property">exposed</span>?.<span class="property">hide</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(app, <span class="title class_">Vnode</span>.<span class="property">component</span>?.<span class="property">exposed</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>Loading.vue</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-if=&quot;isShow&quot; class=&quot;loading&quot;&gt;</span><br><span class="line">    &lt;div class=&quot;loading-content&quot;&gt;Loading...&lt;/div&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">  </span><br><span class="line">&lt;script setup lang=&#x27;ts&#x27;&gt;</span><br><span class="line">import &#123; ref &#125; from &#x27;vue&#x27;;</span><br><span class="line">const isShow = ref(false)//定位loading 的开关</span><br><span class="line"></span><br><span class="line">const show = () =&gt; &#123;</span><br><span class="line">  isShow.value = true</span><br><span class="line">&#125;</span><br><span class="line">const hide = () =&gt; &#123;</span><br><span class="line">  isShow.value = false</span><br><span class="line">&#125;</span><br><span class="line">//对外暴露 当前组件的属性和方法</span><br><span class="line">defineExpose(&#123;</span><br><span class="line">  isShow,</span><br><span class="line">  show,</span><br><span class="line">  hide</span><br><span class="line">&#125;)</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">&lt;style scoped lang=&quot;less&quot;&gt;</span><br><span class="line">.loading &#123;</span><br><span class="line">  position: fixed;</span><br><span class="line">  inset: 0;</span><br><span class="line">  background: rgba(0, 0, 0, 0.8);</span><br><span class="line">  display: flex;</span><br><span class="line">  justify-content: center;</span><br><span class="line">  align-items: center;</span><br><span class="line"></span><br><span class="line">  &amp;-content &#123;</span><br><span class="line">    font-size: 30px;</span><br><span class="line">    color: #fff;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><strong>main.ts</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Loading</span> <span class="keyword">from</span> <span class="string">&#x27;./components/Loading/index&#x27;</span></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title class_">Loading</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Lod</span> = &#123;</span><br><span class="line">  <span class="attr">show</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>,</span><br><span class="line">  <span class="attr">hide</span>: <span class="function">() =&gt;</span> <span class="built_in">void</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编写ts loading 声明文件放置报错 和 智能提示</span></span><br><span class="line"><span class="keyword">declare</span> <span class="variable language_">module</span> <span class="string">&quot;vue&quot;</span> &#123;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">interface</span> <span class="title class_">ComponentCustomProperties</span> &#123;</span><br><span class="line">    <span class="attr">_loading</span>: <span class="title class_">Lod</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;Loading.ts&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; &amp;#123; &lt;span class=&quot;title class_&quot;&gt;App&lt;/span&gt;, &lt;span class=&quot;title class_&quot;&gt;VNode&lt;/span&gt; &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Loading&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;./index.vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过createVNode转成Vnode&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; createVNode, render &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;vue&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;install&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;app: App&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Vnode&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;VNode&lt;/span&gt; = &lt;span class=&quot;title function_&quot;&gt;createVNode&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;Loading&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;title function_&quot;&gt;render&lt;/span&gt;(&lt;span class=&quot;title class_&quot;&gt;Vnode&lt;/span&gt;, &lt;span class=&quot;variable language_&quot;&gt;document&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;body&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    app.&lt;span class=&quot;property&quot;&gt;config&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;globalProperties&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;_loading&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;show&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;Vnode&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;component&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;exposed&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;show&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;hide&lt;/span&gt;: &lt;span class=&quot;title class_&quot;&gt;Vnode&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;component&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;exposed&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;hide&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(app, &lt;span class=&quot;title class_&quot;&gt;Vnode&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;component&lt;/span&gt;?.&lt;span class=&quot;property&quot;&gt;exposed&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Plugins" scheme="http://example.com/categories/Plugins/"/>
    
    
    <category term="Plugins" scheme="http://example.com/tags/Plugins/"/>
    
  </entry>
  
  <entry>
    <title>CanvasBase64</title>
    <link href="http://example.com/2022/11/16/Hooks1-1/"/>
    <id>http://example.com/2022/11/16/Hooks1-1/</id>
    <published>2022-11-16T02:54:04.000Z</published>
    <updated>2022-11-16T03:01:47.703Z</updated>
    
    <content type="html"><![CDATA[<p><strong>图片通过canvas转base64</strong></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; onMounted &#125; <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> <span class="title class_">Options</span> = &#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">useBase64</span>(<span class="params">options: Options</span>): <span class="title class_">Promise</span>&lt;&#123; <span class="attr">baseUrl</span>: <span class="built_in">string</span> &#125;&gt; &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">onMounted</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">//获取图片实例</span></span><br><span class="line">      <span class="keyword">let</span> <span class="attr">img</span>: <span class="title class_">HTMLImageElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>) <span class="keyword">as</span> <span class="title class_">HTMLImageElement</span></span><br><span class="line">      <span class="comment">//是否加载完成    </span></span><br><span class="line">      img.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">resolve</span>(&#123;</span><br><span class="line">          <span class="attr">baseUrl</span>: <span class="title function_">base64</span>(img)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">base64</span> = (<span class="params">el: HTMLImageElement</span>) =&gt; &#123;</span><br><span class="line">      <span class="keyword">const</span> canvas = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;canvas&#x27;</span>)</span><br><span class="line">      <span class="keyword">const</span> ctx = canvas.<span class="title function_">getContext</span>(<span class="string">&quot;2d&quot;</span>)</span><br><span class="line">      canvas.<span class="property">width</span> = el.<span class="property">width</span></span><br><span class="line">      canvas.<span class="property">height</span> = el.<span class="property">height</span></span><br><span class="line">      ctx?.<span class="title function_">drawImage</span>(el, <span class="number">0</span>, <span class="number">0</span>, canvas.<span class="property">width</span>, canvas.<span class="property">height</span>)</span><br><span class="line">      <span class="keyword">return</span> canvas.<span class="title function_">toDataURL</span>(<span class="string">&#x27;image/png&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// useBase64(&#123; el: &quot;#img&quot; &#125;).then(res =&gt; &#123;</span></span><br><span class="line">  <span class="comment">//   console.log(res.baseUrl);</span></span><br><span class="line">  <span class="comment">// &#125;)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;图片通过canvas转base64&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight typescript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span</summary>
      
    
    
    
    <category term="Hooks" scheme="http://example.com/categories/Hooks/"/>
    
    
    <category term="Hooks" scheme="http://example.com/tags/Hooks/"/>
    
  </entry>
  
  <entry>
    <title>Call、Bind、Apply重写</title>
    <link href="http://example.com/2022/11/10/Prototype1-1/"/>
    <id>http://example.com/2022/11/10/Prototype1-1/</id>
    <published>2022-11-10T03:03:12.629Z</published>
    <updated>2022-11-16T07:41:22.418Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&quot;window&quot;</span></span><br><span class="line"><span class="keyword">const</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;CNY&#x27;</span>,</span><br><span class="line">  <span class="title function_">say</span>(<span class="params">age, sex</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>, age, sex);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Person2</span> = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;CY&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>call</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyCall</span> = <span class="keyword">function</span> (<span class="params">target, ...args</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;target: &#x27;</span>, target, ...args);</span><br><span class="line">  target = target || <span class="variable language_">window</span></span><br><span class="line">  <span class="keyword">const</span> symbolKey = <span class="title class_">Symbol</span>()</span><br><span class="line">  target[symbolKey] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = target[symbolKey](...args)  <span class="comment">//args 本身是rest参数</span></span><br><span class="line">  <span class="keyword">delete</span> target[symbolKey]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>apply</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyApply</span> = <span class="keyword">function</span> (<span class="params">target, ...args</span>) &#123;</span><br><span class="line">  target = target || <span class="variable language_">window</span></span><br><span class="line">  <span class="keyword">const</span> symbolKey = <span class="title class_">Symbol</span>()</span><br><span class="line">  target[symbolKey] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">const</span> res = target[symbolKey](...args)        <span class="comment">//args 本身是数组</span></span><br><span class="line">  <span class="keyword">delete</span> target[symbolKey]</span><br><span class="line">  <span class="keyword">return</span> res</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>bind</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">MyBind</span> = <span class="keyword">function</span> (<span class="params">target, ...outArgs</span>) &#123;</span><br><span class="line">  target = target || &#123;&#125;  <span class="comment">//处理边界条件</span></span><br><span class="line">  <span class="keyword">const</span> symbolKey = <span class="title class_">Symbol</span>()</span><br><span class="line">  target[symbolKey] = <span class="variable language_">this</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...innerArgs</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> res = target[symbolKey](...outArgs, ...innerArgs)</span><br><span class="line">    <span class="comment">// delete target[symbolKey]  //不应销毁，存在多次调用情况</span></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; name = &lt;span class=&quot;string&quot;&gt;&amp;quot;window&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; person = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;CNY&amp;#x27;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;title function_&quot;&gt;say&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;age, sex&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;variable language_&quot;&gt;this&lt;/span&gt;.&lt;span class=&quot;property&quot;&gt;name&lt;/span&gt;, age, sex);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Person2&lt;/span&gt; = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&amp;#x27;CY&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Prototype" scheme="http://example.com/categories/Prototype/"/>
    
    
    <category term="Prototype" scheme="http://example.com/tags/Prototype/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://example.com/2022/10/18/TypeScropt1-2/"/>
    <id>http://example.com/2022/10/18/TypeScropt1-2/</id>
    <published>2022-10-18T12:01:03.000Z</published>
    <updated>2022-10-18T12:02:11.369Z</updated>
    
    <content type="html"><![CDATA[<p>type 关键字 （可以给一个类型定义一个名字）  多用于符合类型</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义类型别名</span></span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">new</span>:str = <span class="string">&#x27;CNY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义函数别名</span></span><br><span class="line"><span class="keyword">type</span> fn = <span class="function">() =&gt;</span> <span class="built_in">string</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fun</span>:fn = <span class="function">() =&gt;</span> <span class="string">&#x27;CNY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义联合类型别名</span></span><br><span class="line"><span class="keyword">type</span> str = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str2</span>:str = <span class="number">22</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">str3</span>:str = <span class="string">&#x27;22&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义值的别名</span></span><br><span class="line"><span class="keyword">type</span> value = <span class="built_in">boolean</span> | <span class="number">0</span> | ’<span class="number">123</span>‘</span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:value = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p><strong>nerver类型</strong></p><p>使用 never 类型来表示不应该存在的状态</p><span id="more"></span><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 返回never的函数必须存在无法达到的终点</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 因为必定抛出异常，所以 error 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: <span class="built_in">string</span></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 因为存在死循环，所以 loop 将不会有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loop</span>(<span class="params"></span>): <span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>never和void的差异</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//void类型只是没有返回值 但本身不会出错</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Void</span>(<span class="params"></span>):<span class="built_in">void</span> &#123;</span><br><span class="line">    onsole.<span class="title function_">log</span>();</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//只会抛出异常没有返回值</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Never</span>(<span class="params"></span>):<span class="built_in">never</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;aaa&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Symbol</strong></p><p>symbol类型的值是通过Symbol构造函数创建的</p><p>可以传递参数作为唯一标识，只支持string 和 number 类型的参数</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym1 = <span class="title class_">Symbol</span>(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">let</span> sym2 = <span class="title class_">Symbol</span>(<span class="string">&#x27;key&#x27;</span>)  <span class="comment">//可选的字符串key</span></span><br></pre></td></tr></table></figure><p>Symbol的值是唯一的</p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="keyword">const</span> s2 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="comment">// s1 === s2 =&gt;false</span></span><br></pre></td></tr></table></figure><p>可以用作对象属性的键</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sym = <span class="title class_">Symbol</span>();</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    [sym]: <span class="string">&quot;value&quot;</span></span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj[sym]); <span class="comment">// &quot;value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//拿不到symbol的键名</span></span><br><span class="line"><span class="comment">//for in</span></span><br><span class="line"><span class="comment">//Object.keys()</span></span><br><span class="line"><span class="comment">//Object.getOwnPropertyNames()</span></span><br><span class="line"><span class="comment">//JSON.stringify()</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getOwnPropertySymbols</span>()    <span class="comment">//拿到具体的symbol值</span></span><br><span class="line"><span class="title class_">Reflext</span>.<span class="title function_">ownKeys</span>()    <span class="comment">//拿到对象的所有属性</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Symbol.iterator 迭代器</p><p>支持遍历大部分类型迭代器 arr nodeList arguments set map</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var arr  = [1,2,3,4]</span><br><span class="line">let iterator = arr[Symbol.iterator]()</span><br></pre></td></tr></table></figure><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">Item</span> &#123;</span><br><span class="line"><span class="attr">age</span>:<span class="built_in">number</span>,</span><br><span class="line">    <span class="attr">name</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">array</span>: <span class="title class_">Array</span>&lt;<span class="title class_">Item</span>&gt; = [&#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;1&quot;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;2&quot;</span> &#125;, &#123; <span class="attr">age</span>: <span class="number">123</span>, <span class="attr">name</span>: <span class="string">&quot;3&quot;</span> &#125;]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> mapTypes = <span class="built_in">string</span> | <span class="built_in">number</span></span><br><span class="line"><span class="keyword">const</span> <span class="attr">map</span>:<span class="title class_">Map</span>&lt;mapTypes,mapTypes&gt; = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;CNY&#x27;</span>)</span><br><span class="line">map.<span class="title function_">set</span>(<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;CNY2&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">A</span>:<span class="number">123</span>,</span><br><span class="line">    <span class="attr">B</span>:<span class="number">456</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">set</span>:<span class="title class_">Set</span>&lt;<span class="built_in">number</span>&gt; = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = (<span class="attr">erg</span>:<span class="built_in">any</span>):<span class="function"><span class="params">void</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">it</span>:<span class="title class_">Iterator</span>&lt;<span class="built_in">any</span>&gt; =erg[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line">    <span class="keyword">let</span> <span class="attr">next</span>:<span class="built_in">any</span> = &#123;<span class="attr">done</span>:<span class="literal">false</span>&#125;</span><br><span class="line">    <span class="title function_">whilte</span>(<span class="params">!next.done</span>)&#123;</span><br><span class="line">next = it.<span class="title function_">next</span>()</span><br><span class="line">        <span class="keyword">if</span>(!next.<span class="property">done</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(next.<span class="property">value</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">gen</span>(array)</span><br></pre></td></tr></table></figure><ul><li><p><code>Symbol.hasInstance</code><br>方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。</p></li><li><p><code>Symbol.isConcatSpreadable</code><br>布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。</p></li><li><p><code>Symbol.iterator</code><br>方法，被for-of语句调用。返回对象的默认迭代器。</p></li><li><p><code>Symbol.match</code><br>方法，被String.prototype.match调用。正则表达式用来匹配字符串。</p></li><li><p><code>Symbol.replace</code><br>方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。</p></li><li><p><code>Symbol.search</code><br>方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。</p></li><li><p><code>Symbol.species</code><br>函数值，为一个构造函数。用来创建派生对象。</p></li><li><p><code>Symbol.split</code><br>方法，被String.prototype.split调用。正则表达式来用分割字符串。</p></li><li><p><code>Symbol.toPrimitive</code><br>方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。</p></li><li><p><code>Symbol.toStringTag</code><br>方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。</p></li><li><p><code>Symbol.unscopables</code><br>对象，它自己拥有的属性会被with作用域排除在外。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;type 关键字 （可以给一个类型定义一个名字）  多用于符合类型&lt;/p&gt;
&lt;figure class=&quot;highlight tsx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义类型别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; str = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;new&lt;/span&gt;:str = &lt;span class=&quot;string&quot;&gt;&amp;#x27;CNY&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义函数别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; fn = &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;fun&lt;/span&gt;:fn = &lt;span class=&quot;function&quot;&gt;() =&amp;gt;&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&amp;#x27;CNY&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义联合类型别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; str = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt; | &lt;span class=&quot;built_in&quot;&gt;number&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;str2&lt;/span&gt;:str = &lt;span class=&quot;number&quot;&gt;22&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;str3&lt;/span&gt;:str = &lt;span class=&quot;string&quot;&gt;&amp;#x27;22&amp;#x27;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//定义值的别名&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; value = &lt;span class=&quot;built_in&quot;&gt;boolean&lt;/span&gt; | &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; | ’&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;‘&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;:value = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;nerver类型&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 never 类型来表示不应该存在的状态&lt;/p&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="http://example.com/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/10/17/Hitokoto1-5/"/>
    <id>http://example.com/2022/10/17/Hitokoto1-5/</id>
    <published>2022-10-17T12:01:45.000Z</published>
    <updated>2022-10-17T12:01:49.336Z</updated>
    
    <content type="html"><![CDATA[<p>不断自我思考。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;不断自我思考。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>TypeScript</title>
    <link href="http://example.com/2022/10/17/TypeScropt1-1/"/>
    <id>http://example.com/2022/10/17/TypeScropt1-1/</id>
    <published>2022-10-17T11:58:37.000Z</published>
    <updated>2022-10-17T12:00:08.744Z</updated>
    
    <content type="html"><![CDATA[<p><strong>类型系统</strong></p><ul><li>在开发过程中找错</li><li>使用”类型注解“来分析代码</li><li>仅存在于开发阶段</li><li>不会提供性能优化</li></ul><p><strong>类型</strong></p><ul><li>一个更方便我们去更简便地描述一个具有相应的属性和方法的值的东西</li></ul><p><strong>值</strong></p><ul><li>我们能够赋值给变量（variable）的东西</li><li>每一个值都会有相应的类型</li></ul><span id="more"></span><p><strong>类型的分类</strong></p><ul><li><p>元类型（primitive types）</p><ul><li>string、number、boolean、undefined、null、void、symbol</li></ul></li><li><p>对象类型（Object types）</p><ul><li>function、arrays、classes、objects</li></ul></li><li><p>基础类型：Boolean，Number，String，null，undefined 和 ES6的Symbol和ES10的BigInt</p></li></ul><p><strong>字符串类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//普通声明</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:string = <span class="string">&#x27;CNY&#x27;</span>z</span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以使用es6的字符串模板</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">muban</span>:string = <span class="string">`CNY&#123;a&#125;`</span></span><br></pre></td></tr></table></figure><p><strong>数字类型</strong></p><ul><li>支持十六进制、十进制、八进制和二进制</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">notANumber</span>: number = <span class="title class_">NaN</span>;<span class="comment">//Nan</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num</span>: number = <span class="number">123</span>;<span class="comment">//普通数字</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">infinityNumber</span>: number = <span class="title class_">Infinity</span>;<span class="comment">//无穷大</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">decimal</span>: number = <span class="number">6</span>;<span class="comment">//十进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">hex</span>: number = <span class="number">0xf00d</span>;<span class="comment">//十六进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">binary</span>: number = <span class="number">0b1010</span>;<span class="comment">//二进制</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">octal</span>: number = <span class="number">0o744</span>;<span class="comment">//八进制s</span></span><br></pre></td></tr></table></figure><p><strong>布尔类型</strong></p><ul><li>使用构造函数Boolean创造的对象不是布尔值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">createdBoolean</span>: boolean = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="comment">//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象 </span></span><br></pre></td></tr></table></figure><ul><li>事实上 new Boolean() 返回的是一个 Boolean 对象 需要改成</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">createdBoolean</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">booleand</span>: boolean = <span class="literal">true</span> <span class="comment">//可以直接使用布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">booleand2</span>: boolean = <span class="title class_">Boolean</span>(<span class="number">1</span>) <span class="comment">//也可以通过函数返回布尔值</span></span><br></pre></td></tr></table></figure><p><strong>空值类型</strong></p><ul><li>JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用 <code>void</code> 表示没有任何返回值的函数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">voidFn</span>(<span class="params"></span>): <span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;test void&#x27;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>void类型的用法，主要体现在我们不希望调用者关心函数返回值的情况下，比如通常的异步函数</p></li><li><p>void也可以定义undefined和null类型</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="keyword">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="keyword">void</span> = <span class="literal">null</span></span><br></pre></td></tr></table></figure><ul><li>如果tsconfig.json 开启了严格模式，null 不能赋值给void</li></ul><p><strong>Null和undefined类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span> <span class="comment">//定义undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span> <span class="comment">//定义null</span></span><br></pre></td></tr></table></figure><ul><li><p>void 和 undefined 和 null 最大的区别</p></li><li><p>与void的区别是，undefined 和 null 是所以类型的子类型。也就是说undefined类型的变量，可以赋值给string类型的变量</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样写会报错 void 类型不可以分给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="keyword">void</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: string = <span class="string">&quot;CNY&quot;</span></span><br><span class="line"></span><br><span class="line">num2 = test</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这样是没问题的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">null</span> = <span class="literal">null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: string = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">num2 = test</span><br><span class="line"> </span><br><span class="line"><span class="comment">//或者这样的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">test</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">num2</span>: string = <span class="string">&quot;1&quot;</span></span><br><span class="line"> </span><br><span class="line">num2 = test</span><br></pre></td></tr></table></figure><p><strong>Any类型</strong></p><ul><li>没有强制限定哪种类型，随时切换类型都可以 我们可以对 any 进行任何操作，不需要检查类型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">anys</span>:any = <span class="number">123</span></span><br><span class="line">anys = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">anys = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>声明变量的时候没有指定任意类型默认为any</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> anys;</span><br><span class="line">anys = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">anys = <span class="literal">true</span></span><br></pre></td></tr></table></figure><ul><li>弊端如果使用any 就失去了TS类型检测的作用</li></ul><p><strong>unkonw类型</strong></p><ul><li>unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknow</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//unknown 可以定义任何类型的值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">value</span>: unknown;</span><br><span class="line"> </span><br><span class="line">value = <span class="literal">true</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="number">42</span>;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="string">&quot;Hello World&quot;</span>;    <span class="comment">// OK</span></span><br><span class="line">value = [];               <span class="comment">// OK</span></span><br><span class="line">value = &#123;&#125;;               <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">null</span>;             <span class="comment">// OK</span></span><br><span class="line">value = <span class="literal">undefined</span>;        <span class="comment">// OK</span></span><br><span class="line">value = <span class="title class_">Symbol</span>(<span class="string">&quot;type&quot;</span>);   <span class="comment">// OK</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型</span></span><br><span class="line"><span class="comment">//unknown类型不能赋值给其他类型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>:unknown = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names2</span>:string = names</span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样就没问题 any类型是可以的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names</span>:any = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">names2</span>:string = names   </span><br><span class="line"> </span><br><span class="line"><span class="comment">//unknown可赋值对象只有unknown 和 any</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">bbb</span>:unknown = <span class="string">&#x27;123&#x27;</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">aaa</span>:any= <span class="string">&#x27;456&#x27;</span></span><br><span class="line"> </span><br><span class="line">aaa = bbb</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果是any类型在对象没有这个属性的时候还在获取是不会报错的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:any = &#123;<span class="attr">b</span>:<span class="number">1</span>&#125;</span><br><span class="line">obj.<span class="property">a</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="comment">//如果是unknow 是不能调用属性和方法</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:unknown = &#123;<span class="attr">b</span>:<span class="number">1</span>,<span class="attr">ccc</span>:():<span class="function"><span class="params">number</span>=&gt;</span><span class="number">213</span>&#125;</span><br><span class="line">obj.<span class="property">b</span></span><br><span class="line">obj.<span class="title function_">ccc</span>()</span><br></pre></td></tr></table></figure><p><strong>对象类型</strong></p><ul><li>interface(接口)来定义一种约束</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//使用接口约束的时候不能多一个属性也不能少一个属性</span></span><br><span class="line"><span class="comment">//必须与接口保持一致</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="attr">b</span>:string,</span><br><span class="line">  <span class="attr">a</span>:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//重名interface 可以合并</span></span><br><span class="line">interface A  &#123;</span><br><span class="line">  <span class="attr">name</span>:string</span><br><span class="line">&#125;</span><br><span class="line">interface A &#123;</span><br><span class="line">  <span class="attr">age</span>:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A =&#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;CNY&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//继承</span></span><br><span class="line">interface A&#123;</span><br><span class="line"><span class="attr">name</span>:string,</span><br><span class="line">&#125;</span><br><span class="line">interface B <span class="keyword">extends</span> A&#123;</span><br><span class="line">  <span class="attr">age</span>:string</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:B = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&#x27;CNY&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>:<span class="string">&quot;22&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//可选属性 使用？操作符</span></span><br><span class="line"><span class="comment">//可选属性的含义是该属性可以不存在</span></span><br><span class="line">interface <span class="title class_">Person</span>&#123;</span><br><span class="line">  b?:string,</span><br><span class="line">  <span class="attr">a</span>:string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span> = &#123;</span><br><span class="line"><span class="attr">a</span>:<span class="string">&quot;23&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//任意属性[propName:string]</span></span><br><span class="line"><span class="comment">//允许添加新的任意属性</span></span><br><span class="line"><span class="comment">//一个接口中只能定义一个任意属性。如果接口中有多个类型的属性，则可以在任意属性中使用联合类型：</span></span><br><span class="line">interface <span class="title class_">Person</span>&#123;</span><br><span class="line">  [<span class="attr">propName</span>:string]:string | number,</span><br><span class="line">  <span class="attr">a</span>:string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="string">&#x27;CNY&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="string">&#x27;22&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只读属性readonly</span></span><br><span class="line"><span class="comment">//readonly只读属性是不允许被赋值的只能读取</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Person</span>&#123;</span><br><span class="line">  b?:string,</span><br><span class="line">  readonly <span class="attr">a</span>:string,</span><br><span class="line">  [<span class="attr">propName</span>:string]:any</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">c</span>:<span class="string">&#x27;123&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//person.a = 123    只读属性无法重新赋值</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//添加函数</span></span><br><span class="line">interface <span class="title class_">Person</span> &#123;</span><br><span class="line">  b?:string,</span><br><span class="line">  readonly <span class="attr">a</span>:string,</span><br><span class="line">  [<span class="attr">propName</span>:string]:any,</span><br><span class="line">  <span class="title function_">fn</span>():<span class="keyword">void</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="attr">person</span>:<span class="title class_">Person</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">b</span>:<span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">  <span class="attr">fn</span>:<span class="function">()=&gt;</span>&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">123</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>数组类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型加中括号</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:number[] = [<span class="number">123</span>]</span><br><span class="line"><span class="comment">//这样会报错定义了数字类型出现字符串是不允许的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="string">&#x27;1&#x27;</span>]</span><br><span class="line"><span class="comment">//操作方法添加也是不允许的</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,]</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]; <span class="comment">//数字类型的数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr2</span>: string[] = [<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>]; <span class="comment">//字符串类型的数组</span></span><br><span class="line"><span class="keyword">var</span> <span class="attr">arr3</span>: any[] = [<span class="number">1</span>, <span class="string">&quot;2&quot;</span>, <span class="literal">true</span>]; <span class="comment">//任意类型的数组</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//最简单的方法是使用「类型 + 方括号」来表示数组：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的项中不允许出现其他的类型：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: number[] = [<span class="number">1</span>, <span class="string">&#x27;1&#x27;</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]; <span class="comment">//error</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//数组的一些方法的参数也会根据数组在定义时约定的类型进行限制：</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: number[] = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>];</span><br><span class="line">fibonacci.<span class="title function_">push</span>(<span class="string">&#x27;8&#x27;</span>); <span class="comment">//error</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组泛型</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:<span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//用接口表示数组</span></span><br><span class="line"><span class="comment">//一般来描述类数组</span></span><br><span class="line">interface <span class="title class_">NumberArr</span> &#123;</span><br><span class="line">  [<span class="attr">index</span>:number]:number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">fibonacci</span>: <span class="title class_">NumberArr</span> = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">//表示：只要索引的类型是数字时，那么值的类型必须是数字</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//any 在数组中的应用</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: any[] = [<span class="string">&#x27;test&#x27;</span>, <span class="number">1</span>, [],&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;]</span><br></pre></td></tr></table></figure><p><strong>函数的类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意，参数不能多传，也不能少传 必须按照约定的类型来</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">name</span>: string, <span class="attr">age</span>:number): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name + age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">18</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//通过?表示该参数为可选参数</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">name</span>: string, age?:number): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name + age</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;张三&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">name</span>: string = <span class="string">&quot;我是默认值&quot;</span>): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> name</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>()</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义参数 num 和 num2  ：后面定义返回值的类型</span></span><br><span class="line">interface <span class="title class_">Add</span> &#123;</span><br><span class="line">    (<span class="attr">num</span>:  number, <span class="attr">num2</span>: number): number</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="attr">fn</span>: <span class="title class_">Add</span> = (<span class="attr">num</span>: number, <span class="attr">num2</span>: number): <span class="function"><span class="params">number</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num + num2</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">fn</span>(<span class="number">5</span>, <span class="number">5</span>)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">interface <span class="title class_">User</span>&#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="attr">age</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getUserInfo</span>(<span class="params">user: User</span>): <span class="title class_">User</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> user</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fn = (<span class="attr">array</span>:number[],...<span class="attr">items</span>:any[]):any[] =&gt; &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(array,items)</span><br><span class="line">       <span class="keyword">return</span> items</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">a</span>:number[] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(a,<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;6&#x27;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数重载</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果参数类型不同，则参数类型应设置为 any。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//参数数量不同你可以将不同的参数设置为可选。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: number</span>): <span class="keyword">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: string, params2: number</span>): <span class="keyword">void</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params">params: any, params2?: any</span>): <span class="keyword">void</span> &#123;</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params)</span><br><span class="line"> </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(params2)</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="number">123</span>)</span><br><span class="line"> </span><br><span class="line"><span class="title function_">fn</span>(<span class="string">&#x27;123&#x27;</span>,<span class="number">456</span>)</span><br></pre></td></tr></table></figure><p><strong>联合类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: number | string  = <span class="string">&#x27;010-820&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//这样写是会报错的应为我们的联合类型只有数字和字符串并没有布尔值</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myPhone</span>: number | string  = <span class="literal">true</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//函数使用联合类型</span></span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">something</span>:number | boolean):<span class="function"><span class="params">boolean</span> =&gt;</span> &#123;</span><br><span class="line">     <span class="keyword">return</span> !!something</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>交叉类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//多种类型的集合，联合对象将具有所联合类型的所有成员</span></span><br><span class="line"></span><br><span class="line">interface <span class="title class_">People</span> &#123;</span><br><span class="line">  <span class="attr">age</span>: number,</span><br><span class="line">  height： number</span><br><span class="line">&#125;</span><br><span class="line">interface <span class="title class_">Man</span>&#123;</span><br><span class="line">  <span class="attr">sex</span>: string</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CNY</span> = (<span class="params">man: People &amp; Man</span>) =&gt; &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">age</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">height</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(man.<span class="property">sex</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">CNY</span>(&#123;<span class="attr">age</span>: <span class="number">18</span>,<span class="attr">height</span>: <span class="number">180</span>,<span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure><p><strong>类型断言</strong></p><p><strong>值 as 类型</strong>      <strong>&lt;类型&gt;值</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">       <span class="attr">run</span>: string</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">interface B &#123;</span><br><span class="line">       <span class="attr">build</span>: string</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> type.<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这样写是有警告的应为B的接口上面是没有定义run这个属性的</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">interface A &#123;</span><br><span class="line">       <span class="attr">run</span>: string</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">interface B &#123;</span><br><span class="line">       <span class="attr">build</span>: string</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> fn = (<span class="attr">type</span>: A | B): <span class="function"><span class="params">string</span> =&gt;</span> &#123;</span><br><span class="line">       <span class="keyword">return</span> (type <span class="keyword">as</span> A).<span class="property">run</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以使用类型断言来推断他传入的是A接口的值</span></span><br></pre></td></tr></table></figure><ul><li>类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，反而滥用类型断言可能会导致运行时错误</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="variable language_">window</span> <span class="keyword">as</span> any).<span class="property">abc</span> = <span class="number">123</span></span><br><span class="line"><span class="comment">//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的。</span></span><br></pre></td></tr></table></figure><p><strong>内置对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">b</span>: <span class="title class_">Boolean</span> = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="number">1</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="title class_">Number</span> = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="literal">true</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(n)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">s</span>: <span class="title class_">String</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;CNY&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">d</span>: <span class="title class_">Date</span> = <span class="keyword">new</span> <span class="title class_">Date</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">r</span>: <span class="title class_">RegExp</span> = <span class="regexp">/^1/</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(r)</span><br><span class="line"><span class="keyword">let</span> <span class="attr">e</span>: <span class="title class_">Error</span> = <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;error!&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">body</span>: <span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="property">body</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">allDiv</span>: <span class="title class_">NodeList</span> = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="comment">//读取div 这种需要类型断言 或者加个判断应为读不到返回null</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">div</span>:<span class="title class_">HTMLElement</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;div&#x27;</span>) <span class="keyword">as</span> <span class="title class_">HTMLDivElement</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e: MouseEvent</span>) &#123;</span><br><span class="line">    </span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//dom元素的映射表</span></span><br><span class="line">interface <span class="title class_">HTMLElementTagNameMap</span> &#123;</span><br><span class="line">    <span class="string">&quot;a&quot;</span>: <span class="title class_">HTMLAnchorElement</span>;</span><br><span class="line">    <span class="string">&quot;abbr&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;address&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;applet&quot;</span>: <span class="title class_">HTMLAppletElement</span>;</span><br><span class="line">    <span class="string">&quot;area&quot;</span>: <span class="title class_">HTMLAreaElement</span>;</span><br><span class="line">    <span class="string">&quot;article&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;aside&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;audio&quot;</span>: <span class="title class_">HTMLAudioElement</span>;</span><br><span class="line">    <span class="string">&quot;b&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;base&quot;</span>: <span class="title class_">HTMLBaseElement</span>;</span><br><span class="line">    <span class="string">&quot;bdi&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;bdo&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;blockquote&quot;</span>: <span class="title class_">HTMLQuoteElement</span>;</span><br><span class="line">    <span class="string">&quot;body&quot;</span>: <span class="title class_">HTMLBodyElement</span>;</span><br><span class="line">    <span class="string">&quot;br&quot;</span>: <span class="title class_">HTMLBRElement</span>;</span><br><span class="line">    <span class="string">&quot;button&quot;</span>: <span class="title class_">HTMLButtonElement</span>;</span><br><span class="line">    <span class="string">&quot;canvas&quot;</span>: <span class="title class_">HTMLCanvasElement</span>;</span><br><span class="line">    <span class="string">&quot;caption&quot;</span>: <span class="title class_">HTMLTableCaptionElement</span>;</span><br><span class="line">    <span class="string">&quot;cite&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;code&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;col&quot;</span>: <span class="title class_">HTMLTableColElement</span>;</span><br><span class="line">    <span class="string">&quot;colgroup&quot;</span>: <span class="title class_">HTMLTableColElement</span>;</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: <span class="title class_">HTMLDataElement</span>;</span><br><span class="line">    <span class="string">&quot;datalist&quot;</span>: <span class="title class_">HTMLDataListElement</span>;</span><br><span class="line">    <span class="string">&quot;dd&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;del&quot;</span>: <span class="title class_">HTMLModElement</span>;</span><br><span class="line">    <span class="string">&quot;details&quot;</span>: <span class="title class_">HTMLDetailsElement</span>;</span><br><span class="line">    <span class="string">&quot;dfn&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;dialog&quot;</span>: <span class="title class_">HTMLDialogElement</span>;</span><br><span class="line">    <span class="string">&quot;dir&quot;</span>: <span class="title class_">HTMLDirectoryElement</span>;</span><br><span class="line">    <span class="string">&quot;div&quot;</span>: <span class="title class_">HTMLDivElement</span>;</span><br><span class="line">    <span class="string">&quot;dl&quot;</span>: <span class="title class_">HTMLDListElement</span>;</span><br><span class="line">    <span class="string">&quot;dt&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;em&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;embed&quot;</span>: <span class="title class_">HTMLEmbedElement</span>;</span><br><span class="line">    <span class="string">&quot;fieldset&quot;</span>: <span class="title class_">HTMLFieldSetElement</span>;</span><br><span class="line">    <span class="string">&quot;figcaption&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;figure&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;font&quot;</span>: <span class="title class_">HTMLFontElement</span>;</span><br><span class="line">    <span class="string">&quot;footer&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;form&quot;</span>: <span class="title class_">HTMLFormElement</span>;</span><br><span class="line">    <span class="string">&quot;frame&quot;</span>: <span class="title class_">HTMLFrameElement</span>;</span><br><span class="line">    <span class="string">&quot;frameset&quot;</span>: <span class="title class_">HTMLFrameSetElement</span>;</span><br><span class="line">    <span class="string">&quot;h1&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h2&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h3&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h4&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h5&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;h6&quot;</span>: <span class="title class_">HTMLHeadingElement</span>;</span><br><span class="line">    <span class="string">&quot;head&quot;</span>: <span class="title class_">HTMLHeadElement</span>;</span><br><span class="line">    <span class="string">&quot;header&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;hgroup&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;hr&quot;</span>: <span class="title class_">HTMLHRElement</span>;</span><br><span class="line">    <span class="string">&quot;html&quot;</span>: <span class="title class_">HTMLHtmlElement</span>;</span><br><span class="line">    <span class="string">&quot;i&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;iframe&quot;</span>: <span class="title class_">HTMLIFrameElement</span>;</span><br><span class="line">    <span class="string">&quot;img&quot;</span>: <span class="title class_">HTMLImageElement</span>;</span><br><span class="line">    <span class="string">&quot;input&quot;</span>: <span class="title class_">HTMLInputElement</span>;</span><br><span class="line">    <span class="string">&quot;ins&quot;</span>: <span class="title class_">HTMLModElement</span>;</span><br><span class="line">    <span class="string">&quot;kbd&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;label&quot;</span>: <span class="title class_">HTMLLabelElement</span>;</span><br><span class="line">    <span class="string">&quot;legend&quot;</span>: <span class="title class_">HTMLLegendElement</span>;</span><br><span class="line">    <span class="string">&quot;li&quot;</span>: <span class="title class_">HTMLLIElement</span>;</span><br><span class="line">    <span class="string">&quot;link&quot;</span>: <span class="title class_">HTMLLinkElement</span>;</span><br><span class="line">    <span class="string">&quot;main&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;map&quot;</span>: <span class="title class_">HTMLMapElement</span>;</span><br><span class="line">    <span class="string">&quot;mark&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;marquee&quot;</span>: <span class="title class_">HTMLMarqueeElement</span>;</span><br><span class="line">    <span class="string">&quot;menu&quot;</span>: <span class="title class_">HTMLMenuElement</span>;</span><br><span class="line">    <span class="string">&quot;meta&quot;</span>: <span class="title class_">HTMLMetaElement</span>;</span><br><span class="line">    <span class="string">&quot;meter&quot;</span>: <span class="title class_">HTMLMeterElement</span>;</span><br><span class="line">    <span class="string">&quot;nav&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;noscript&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;object&quot;</span>: <span class="title class_">HTMLObjectElement</span>;</span><br><span class="line">    <span class="string">&quot;ol&quot;</span>: <span class="title class_">HTMLOListElement</span>;</span><br><span class="line">    <span class="string">&quot;optgroup&quot;</span>: <span class="title class_">HTMLOptGroupElement</span>;</span><br><span class="line">    <span class="string">&quot;option&quot;</span>: <span class="title class_">HTMLOptionElement</span>;</span><br><span class="line">    <span class="string">&quot;output&quot;</span>: <span class="title class_">HTMLOutputElement</span>;</span><br><span class="line">    <span class="string">&quot;p&quot;</span>: <span class="title class_">HTMLParagraphElement</span>;</span><br><span class="line">    <span class="string">&quot;param&quot;</span>: <span class="title class_">HTMLParamElement</span>;</span><br><span class="line">    <span class="string">&quot;picture&quot;</span>: <span class="title class_">HTMLPictureElement</span>;</span><br><span class="line">    <span class="string">&quot;pre&quot;</span>: <span class="title class_">HTMLPreElement</span>;</span><br><span class="line">    <span class="string">&quot;progress&quot;</span>: <span class="title class_">HTMLProgressElement</span>;</span><br><span class="line">    <span class="string">&quot;q&quot;</span>: <span class="title class_">HTMLQuoteElement</span>;</span><br><span class="line">    <span class="string">&quot;rp&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;rt&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;ruby&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;s&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;samp&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;script&quot;</span>: <span class="title class_">HTMLScriptElement</span>;</span><br><span class="line">    <span class="string">&quot;section&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;select&quot;</span>: <span class="title class_">HTMLSelectElement</span>;</span><br><span class="line">    <span class="string">&quot;slot&quot;</span>: <span class="title class_">HTMLSlotElement</span>;</span><br><span class="line">    <span class="string">&quot;small&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;source&quot;</span>: <span class="title class_">HTMLSourceElement</span>;</span><br><span class="line">    <span class="string">&quot;span&quot;</span>: <span class="title class_">HTMLSpanElement</span>;</span><br><span class="line">    <span class="string">&quot;strong&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;style&quot;</span>: <span class="title class_">HTMLStyleElement</span>;</span><br><span class="line">    <span class="string">&quot;sub&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;summary&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;sup&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;table&quot;</span>: <span class="title class_">HTMLTableElement</span>;</span><br><span class="line">    <span class="string">&quot;tbody&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;td&quot;</span>: <span class="title class_">HTMLTableDataCellElement</span>;</span><br><span class="line">    <span class="string">&quot;template&quot;</span>: <span class="title class_">HTMLTemplateElement</span>;</span><br><span class="line">    <span class="string">&quot;textarea&quot;</span>: <span class="title class_">HTMLTextAreaElement</span>;</span><br><span class="line">    <span class="string">&quot;tfoot&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;th&quot;</span>: <span class="title class_">HTMLTableHeaderCellElement</span>;</span><br><span class="line">    <span class="string">&quot;thead&quot;</span>: <span class="title class_">HTMLTableSectionElement</span>;</span><br><span class="line">    <span class="string">&quot;time&quot;</span>: <span class="title class_">HTMLTimeElement</span>;</span><br><span class="line">    <span class="string">&quot;title&quot;</span>: <span class="title class_">HTMLTitleElement</span>;</span><br><span class="line">    <span class="string">&quot;tr&quot;</span>: <span class="title class_">HTMLTableRowElement</span>;</span><br><span class="line">    <span class="string">&quot;track&quot;</span>: <span class="title class_">HTMLTrackElement</span>;</span><br><span class="line">    <span class="string">&quot;u&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;ul&quot;</span>: <span class="title class_">HTMLUListElement</span>;</span><br><span class="line">    <span class="string">&quot;var&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">    <span class="string">&quot;video&quot;</span>: <span class="title class_">HTMLVideoElement</span>;</span><br><span class="line">    <span class="string">&quot;wbr&quot;</span>: <span class="title class_">HTMLElement</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>class类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span>&#123;</span><br><span class="line"><span class="title function_">constructor</span> () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">run () &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在TypeScript中是不允许直接在constructor中直接定义变量的，需要在constructor上面先声明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="attr">name</span>:string,</span><br><span class="line"><span class="attr">age</span>:number</span><br><span class="line"><span class="title function_">constructor</span> (<span class="attr">name</span>:string,<span class="attr">age</span>:number)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这样引发了第二个问题，你如果定义了变量不用，也会报错，通常是给个默认值，或者是进行赋值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="attr">name</span>:string,</span><br><span class="line"><span class="attr">age</span>:number = <span class="number">0</span></span><br><span class="line"><span class="title function_">constructor</span> (<span class="attr">name</span>:string,<span class="attr">age</span>:number)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类的修饰符<ul><li><strong>public private protected</strong></li></ul></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line"><span class="keyword">public</span> <span class="attr">name</span>:<span class="built_in">string</span>,</span><br><span class="line"><span class="keyword">private</span> <span class="attr">age</span>:<span class="built_in">number</span></span><br><span class="line"><span class="keyword">protected</span> <span class="attr">some</span>:<span class="built_in">any</span></span><br><span class="line">    <span class="keyword">static</span> <span class="attr">sth</span>:<span class="built_in">string</span></span><br><span class="line"><span class="title function_">constructor</span> (<span class="attr">name</span>:<span class="built_in">string</span>,<span class="attr">age</span>:<span class="built_in">number</span>,<span class="attr">some</span>:<span class="built_in">any</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">age</span> = age</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">any</span> = <span class="built_in">any</span></span><br><span class="line">        <span class="comment">//this.sth  error</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> run () &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;1</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">static go() &#123;</span></span><br><span class="line"><span class="string">        return this.run()</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">let cny = new Person(&#x27;</span><span class="variable constant_">CNY</span><span class="string">&#x27;,22,&#x27;</span>N<span class="string">&#x27;)</span></span><br><span class="line"><span class="string">cny.name</span></span><br><span class="line"><span class="string">cny.age</span></span><br><span class="line"><span class="string">cny.some</span></span><br><span class="line"><span class="string">Person.sth</span></span><br><span class="line"><span class="string">Person.run()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">class Man extends Person&#123;</span></span><br><span class="line"><span class="string">    constructor () &#123;</span></span><br><span class="line"><span class="string">this.some</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><p>使用public修饰符 可以让你所定义的变量，内部访问，也可以外部访问，如果不写默认就是public</p><p>使用private修饰符 代表定义的变量是私有的，只能在内部访问，不能在外部访问</p><p>使用protect修饰符 代表定义的变量是私有的，只能在内部和继承的子类中访问，不能在外部访问</p><p>static静态属性和静态方法</p><p>用static定义的属性，不可以通过this去访问，只能通过类名去调用</p><p>同理static静态函数，也不能通过this去调用，也只能通过类名去调用</p><p>如果两个函数都是static静态函数，可以通过this相互调用</p><ul><li><strong>interface 定义类</strong></li></ul><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass</span> &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="attr">type</span>: <span class="built_in">boolean</span>): <span class="built_in">boolean</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">interface</span> <span class="title class_">PersonClass2</span>&#123;</span><br><span class="line">    <span class="title function_">set</span>():<span class="built_in">void</span>,</span><br><span class="line">    <span class="attr">asd</span>:<span class="built_in">string</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&quot;123&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> <span class="keyword">implements</span> <span class="title class_">PersonClass</span>,<span class="title class_">PersonClass2</span> &#123;</span><br><span class="line">    <span class="attr">asd</span>: <span class="built_in">string</span></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>()</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">asd</span> = <span class="string">&#x27;123&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params"><span class="keyword">type</span>:<span class="built_in">boolean</span></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">type</span></span><br><span class="line">    &#125;</span><br><span class="line">    set () &#123;</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象类</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line"><span class="attr">name</span>:string</span><br><span class="line"><span class="title function_">constructor</span> (<span class="attr">name</span>:string) &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">name</span> = name</span><br><span class="line">&#125;</span><br><span class="line">abstract <span class="title function_">getName</span>():string</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span> () &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="title function_">getName</span>():string&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;CNY&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>元组</strong></p><ul><li>如果需要一个固定大小的不同类型值的集合</li><li>元组就是数组的变种</li><li>元组(Tuple)就是固定数量的不同类型的元素的组合</li><li>元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定，元组的好处在于可以把多个元素作为一个单元传递，如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">arr</span>:[number,string] = [<span class="number">1</span>,<span class="string">&#x27;string&#x27;</span>]</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">arr2</span>: readonly [number,boolean,string,<span class="literal">undefined</span>] = [<span class="number">1</span>,<span class="literal">true</span>,<span class="string">&#x27;sring&#x27;</span>,<span class="literal">undefined</span>]</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//应用场景 例如定义excel返回的数据</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">excel</span>: [string, string, number, string][] = [</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">    [<span class="string">&#x27;title&#x27;</span>, <span class="string">&#x27;name&#x27;</span>, <span class="number">1</span>, <span class="string">&#x27;123&#x27;</span>],</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>枚举类型</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">0</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="number">2</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认就是从0开始的 可以不写值</span></span><br></pre></td></tr></table></figure><p><strong>增长枚举</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义了一个数字枚举， Red使用初始化为 1。 其余的成员会从 1开始自动增长</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="number">1</span>,</span><br><span class="line">   <span class="title class_">Green</span>,</span><br><span class="line">   <span class="title class_">BLue</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>字符串枚举</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在一个字符串枚举里，每个成员都必须用字符串字面量</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">Red</span> = <span class="string">&#x27;red&#x27;</span>,</span><br><span class="line">   <span class="title class_">Green</span> = <span class="string">&#x27;green&#x27;</span>,</span><br><span class="line">   <span class="title class_">BLue</span> = <span class="string">&#x27;blue&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>异构枚举</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//枚举可以混合字符串和数字成员</span></span><br><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接口枚举</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="title class_">Types</span> &#123;</span><br><span class="line">   C,</span><br><span class="line">   D</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">interface</span> A &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">C</span></span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">let</span> <span class="attr">obj</span>:A = &#123;</span><br><span class="line">   <span class="attr">red</span>:<span class="title class_">Types</span>.<span class="property">C</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>const枚举</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//let  和 var 都是不允许的声明只能使用const</span></span><br><span class="line"><span class="comment">//大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用 const枚举。 常量枚举通过在枚举上使用 const修饰符来定义</span></span><br><span class="line"><span class="comment">//const 声明的枚举会被编译成常量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">enum</span> <span class="title class_">Types</span>&#123;</span><br><span class="line">   <span class="title class_">No</span> = <span class="string">&quot;No&quot;</span>,</span><br><span class="line">   <span class="title class_">Yes</span> = <span class="number">1</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>反向映射</strong></p><figure class="highlight tsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//它包含了正向映射（ name -&gt; value）和反向映射（ value -&gt; name）</span></span><br><span class="line"><span class="comment">//不会为字符串枚举成员生成反向映射</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> A &#123;</span><br><span class="line">    <span class="variable constant_">CNY</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> c = A.<span class="property">CNY</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c)  <span class="comment">//0</span></span><br><span class="line"><span class="keyword">let</span> c1 = A[<span class="number">0</span>] <span class="comment">//CNY</span></span><br></pre></td></tr></table></figure><p><strong>类型推断</strong></p><ul><li>当变量声明和变量初始化在同一行的时候，类型推断系统才会起作用</li><li>手动添加类型注解的三种情况</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1）变量声明和变量初始化不在同一行</span></span><br><span class="line"><span class="comment">// 2）当一个函数返回any类型，但我们想要明确具体类型</span></span><br><span class="line"><span class="comment">// 3）一个变量拥有一个不能推断出来的类型</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;类型系统&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在开发过程中找错&lt;/li&gt;
&lt;li&gt;使用”类型注解“来分析代码&lt;/li&gt;
&lt;li&gt;仅存在于开发阶段&lt;/li&gt;
&lt;li&gt;不会提供性能优化&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;类型&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个更方便我们去更简便地描述一个具有相应的属性和方法的值的东西&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;值&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我们能够赋值给变量（variable）的东西&lt;/li&gt;
&lt;li&gt;每一个值都会有相应的类型&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="TypeScript" scheme="http://example.com/categories/TypeScript/"/>
    
    
    <category term="TypeScript" scheme="http://example.com/tags/TypeScript/"/>
    
  </entry>
  
  <entry>
    <title>Javascript</title>
    <link href="http://example.com/2022/09/14/Javascript1-3/"/>
    <id>http://example.com/2022/09/14/Javascript1-3/</id>
    <published>2022-09-14T13:30:44.000Z</published>
    <updated>2022-09-14T13:35:35.965Z</updated>
    
    <content type="html"><![CDATA[<p><strong>深拷贝</strong></p><ul><li>还可以通过<code>JSON.stringfy() </code> 和<code>JSON.parse()</code>互相转化，实现深拷贝</li><li>但json数据中，不带任何方法，拷贝方法时无法实现</li></ul><p><strong>数组</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = []    <span class="comment">//数组字面量</span></span><br><span class="line"><span class="keyword">var</span> arr2 = <span class="keyword">new</span> <span class="title class_">Array</span>()  <span class="comment">//不推荐</span></span><br><span class="line"><span class="comment">//通过系统内置的Array构造函数声明数组</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="title class_">Array</span>()</span><br><span class="line"><span class="keyword">var</span> arr3 = <span class="title class_">Array</span>(<span class="number">5</span>)    <span class="comment">//数组长度为5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有数组都及继承于Array.prototype</span></span><br><span class="line"><span class="keyword">var</span> arr = [,,,,,<span class="number">1</span>,<span class="number">1</span>]    <span class="comment">//稀松数组</span></span><br></pre></td></tr></table></figure><span id="more"></span><ul><li>push 、unshift</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  返回值，执行了方法以后的数组长度</span></span><br><span class="line"><span class="comment">//  重写push</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myPush</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line"><span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>] = <span class="variable language_">arguments</span>[i]</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//重写unshift</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myUnshift</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> index = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt; <span class="variable language_">arguments</span>.<span class="property">length</span>;i++)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">splice</span>(index,<span class="number">0</span>,<span class="variable language_">arguments</span>[i]);</span><br><span class="line">        index++</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">myUnshift2</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> argArr = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> newArr = argArr.<span class="title function_">concat</span>(<span class="variable language_">this</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Arr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>pop、shift</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  剪切，返回剪切的值</span></span><br><span class="line"><span class="comment">//  没有参数</span></span><br><span class="line">arr.<span class="title function_">pop</span>()</span><br><span class="line">arr.<span class="title function_">shift</span>()</span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">reverse</span>() <span class="comment">//反转</span></span><br></pre></td></tr></table></figure><ul><li>splice</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">splice</span>(开始项下标,剪切长度，剪切以后最后一位开始添加数据)</span><br></pre></td></tr></table></figure><ul><li>sort<ul><li>按照ascii码来排列的</li><li>返回值<ul><li>负值：a就排到前面</li><li>正值：b就排到前面</li><li>0：保持不动</li></ul></li></ul></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(a &gt; b)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>  </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//等价于 return a-b</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>随机排序</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">//Math.random()  -&gt; 0-1 开区间</span></span><br><span class="line"></span><br><span class="line">arr.<span class="title function_">sort</span>(<span class="keyword">function</span>(<span class="params">a,b</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> rand = <span class="title class_">Math</span>.<span class="title function_">random</span>()</span><br><span class="line">    <span class="keyword">if</span>(rand - <span class="number">0.5</span> &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>在原数组上修改<ul><li>push、unshift、pop、shift、reverse、splice、sort</li></ul></li><li>不改变原数组<ul><li>concat、toString()、slice、join、split</li></ul></li><li>类数组</li><li>类似于数组的对象</li><li>类数组的原型继承于Object、没有数组上的方法</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>:<span class="number">1</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>:<span class="number">2</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>:<span class="number">3</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span>:<span class="number">4</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span>:<span class="number">5</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span>:<span class="number">6</span>,</span><br><span class="line">    <span class="string">&#x27;length&#x27;</span>:<span class="number">6</span>,</span><br><span class="line">    <span class="string">&#x27;push&#x27;</span>:<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span>,</span><br><span class="line">    <span class="string">&#x27;splice&#x27;</span>:<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//等价于</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span> = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">splice</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">push</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;                                          </span><br><span class="line">    <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">length</span>] = e;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">length</span> ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>重写typeof</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">myTypeof</span>(<span class="params">val</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> type = <span class="title function_">typeof</span>(val)</span><br><span class="line">    <span class="keyword">var</span> toStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>;</span><br><span class="line">    <span class="keyword">var</span> res = &#123;</span><br><span class="line"><span class="string">&#x27;[object Array]&#x27;</span>: <span class="string">&#x27;array&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;[object Object]&#x27;</span>: <span class="string">&#x27;object&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;[object Number]&#x27;</span>: <span class="string">&#x27;object number&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;[object String]&#x27;</span>: <span class="string">&#x27;object string&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;[object Boolean]&#x27;</span>: <span class="string">&#x27;object boolean&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">if</span>(val === <span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;null&#x27;</span></span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(type === <span class="string">&#x27;object&#x27;</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> ret = toStr.<span class="title function_">call</span>(val)</span><br><span class="line">        <span class="keyword">return</span> res[ret]</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;深拷贝&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;还可以通过&lt;code&gt;JSON.stringfy() &lt;/code&gt; 和&lt;code&gt;JSON.parse()&lt;/code&gt;互相转化，实现深拷贝&lt;/li&gt;
&lt;li&gt;但json数据中，不带任何方法，拷贝方法时无法实现&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;数组&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr1 = []    &lt;span class=&quot;comment&quot;&gt;//数组字面量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr2 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Array&lt;/span&gt;()  &lt;span class=&quot;comment&quot;&gt;//不推荐&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//通过系统内置的Array构造函数声明数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr3 = &lt;span class=&quot;title class_&quot;&gt;Array&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr3 = &lt;span class=&quot;title class_&quot;&gt;Array&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;)    &lt;span class=&quot;comment&quot;&gt;//数组长度为5&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//所有数组都及继承于Array.prototype&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; arr = [,,,,,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]    &lt;span class=&quot;comment&quot;&gt;//稀松数组&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/09/06/Hitokoto1-4/"/>
    <id>http://example.com/2022/09/06/Hitokoto1-4/</id>
    <published>2022-09-06T12:55:45.000Z</published>
    <updated>2022-09-06T12:58:32.210Z</updated>
    
    <content type="html"><![CDATA[<p>逆而顺之，顺而逆之。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;逆而顺之，顺而逆之。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/08/24/Hitokoto1-3/"/>
    <id>http://example.com/2022/08/24/Hitokoto1-3/</id>
    <published>2022-08-24T13:45:03.000Z</published>
    <updated>2022-08-24T13:45:19.930Z</updated>
    
    <content type="html"><![CDATA[<p>自责要短暂，不过要长久铭记。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;自责要短暂，不过要长久铭记。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Javascript</title>
    <link href="http://example.com/2022/08/24/Javascript1-2/"/>
    <id>http://example.com/2022/08/24/Javascript1-2/</id>
    <published>2022-08-24T13:43:21.000Z</published>
    <updated>2022-08-24T13:49:43.253Z</updated>
    
    <content type="html"><![CDATA[<p><strong>原型与原型链</strong></p><ul><li>所有对象都有自己的原型，包括原型本身</li><li>原型链的顶端 -&gt; Object.prototype</li><li>普通函数不写返回值  默认return  undefined</li><li>构造函数实例化以后返回的就是this</li><li><code>_proto_</code>：构造函数实例化出来的对象永远指向构造函数的原型对象</li><li><code>constructor</code>:指向创建自己的那个构造函数</li><li><code>prototype</code>:每个函数都会有这么一个属性,这个属性指向一个对象,这个对象就叫做原型对象</li></ul><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="title class_">Function</span>的__proto__指向其构造函数<span class="title class_">Function</span>的prototype</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="title class_">Object</span>作为一个构造函数(是一个函数对象!!函数对象!!),所以它的__proto__指向<span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>所有构造函数的的prototype方法的__proto__都指向<span class="title class_">Object</span>.<span class="title function_">prototype</span>(除了<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>自身 -&gt; <span class="literal">null</span>)</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>里的_proto_指向<span class="literal">null</span>（尽头）</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Object</span>()  <span class="comment">//公司不用这种</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>)&#123;&#125;<span class="comment">//前两种_proto_里的constructor都指向Object()</span></span><br><span class="line"><span class="keyword">var</span> obj3 = <span class="keyword">new</span> <span class="title class_">Obj</span>()<span class="comment">//自定义指向自己Obj()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  Object.create(对象,null)  创建对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Obj</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">num</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="title class_">Obj</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="title class_">Obj</span>()                <span class="comment">//两者等价</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj1 = <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>)  <span class="comment">//&#123;&#125; 纯空对象  </span></span><br><span class="line">obj1.<span class="property">num</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">var</span> obj2 = <span class="title class_">Object</span>.<span class="title function_">create</span>(obj1)        <span class="comment">//继承关系</span></span><br><span class="line"></span><br><span class="line">! obj.<span class="property">_proto_</span> = obj1       <span class="comment">//可以更改不能自造</span></span><br></pre></td></tr></table></figure><ul><li>不是所有的对象都继承与Object.prototype</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)  <span class="comment">// &quot;1&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(<span class="number">1</span>)  <span class="comment">// &quot;[Object Number]&quot;</span></span><br></pre></td></tr></table></figure><p><strong>call、apply、bind</strong></p><ul><li>更改this指向</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params">brand,color</span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">brand</span> = brand</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">color</span> = color</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> newcar = &#123;&#125;</span><br><span class="line"><span class="title class_">Car</span>.<span class="title function_">call</span>(newcar,<span class="string">&#x27;Benz&#x27;</span>,<span class="string">&#x27;red&#x27;</span>)</span><br><span class="line"><span class="title class_">Car</span>.<span class="title function_">apply</span>(newcar,[<span class="string">&#x27;Benz&#x27;</span>,<span class="string">&#x27;red&#x27;</span>])    <span class="comment">//arguments []  效果一样  </span></span><br><span class="line"></span><br><span class="line"><span class="title function_">fn</span>()  -&gt;  fu.<span class="title function_">call</span>()    <span class="comment">//所有的函数执行都等价于</span></span><br></pre></td></tr></table></figure><p><strong>继承</strong></p><ul><li>继承的圣杯模式</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Teacher</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">tSkill</span> = <span class="string">&#x27;HTML&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">pSkill</span> = <span class="string">&#x27;CSS&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> t = <span class="keyword">new</span> <span class="title class_">Teacher</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Student</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">sSkill</span> = <span class="string">&#x27;Javascript&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Buffer</span>(<span class="params"></span>)&#123;&#125;  <span class="comment">//缓冲中间件</span></span><br><span class="line"><span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Teacher</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="title class_">Buffer</span>()</span><br><span class="line"><span class="comment">//inherit(Student,Teacher)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span> = buffer  <span class="comment">//修改Student上的prototype不会影响到Teacher</span></span><br><span class="line"><span class="title class_">Student</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>  <span class="comment">//低于Teacher的prototype层级</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="keyword">new</span> <span class="title class_">Student</span>()</span><br></pre></td></tr></table></figure><p><strong>封装buffer</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inherit = (<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//模块化  防止全局污染</span></span><br><span class="line">    <span class="keyword">var</span> <span class="title class_">Buffer</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">Target,Origin</span>)&#123;</span><br><span class="line">      <span class="title class_">Buffer</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="title class_">Origin</span>.<span class="property"><span class="keyword">prototype</span></span></span><br><span class="line">      <span class="title class_">Target</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Buffer</span>()</span><br><span class="line">      <span class="title class_">Target</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">Target</span></span><br><span class="line">      <span class="title class_">Target</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">super_class</span> = <span class="title class_">Orign</span>  <span class="comment">//继承源</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//隐式转换</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;cny&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">obj.<span class="property">name</span> -&gt; obj[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>对象枚举</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//for in  既能遍历对象也能遍历数组</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line"><span class="comment">// obj.key -&gt; obj[&#x27;key&#x27;]  -&gt; undefined</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//obj[key]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>hasOwnProperty</strong></p><ul><li>判断对象自身属性中是否具有指定的属性    true | false</li><li>排除原型</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> obj  |  obj[<span class="string">&#x27;name&#x27;</span>]</span><br></pre></td></tr></table></figure><p><strong>instanceof</strong></p><ul><li>B构造函数的原型是否在A实例对象的原型链上</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//判断类型</span></span><br><span class="line">A  <span class="keyword">instanceof</span>  B</span><br><span class="line">A.<span class="property">constructor</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(A)</span><br></pre></td></tr></table></figure><p><strong>this</strong></p><ul><li>全局this指向window</li><li>预编译函数this指向window</li><li>apply、call改变this指向</li><li>构造函数的this指向实例化对象</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//隐式</span></span><br><span class="line">    <span class="comment">// var this = &#123;</span></span><br><span class="line"><span class="comment">//    _proto_:Test.prototype</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// AO = &#123;</span></span><br><span class="line"><span class="comment">//this:window      预编译</span></span><br><span class="line"><span class="comment">//  </span></span><br><span class="line"><span class="comment">//  this：&#123; 构造函数实例化的时候</span></span><br><span class="line"><span class="comment">//name:&#x27;cny&#x27;,</span></span><br><span class="line"><span class="comment">//      _proto_:Test.prototype   </span></span><br><span class="line"><span class="comment">//  &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// GO = &#123;</span></span><br><span class="line"><span class="comment">//Test:function test()&#123;...&#125;</span></span><br><span class="line"><span class="comment">//  test:&#123;</span></span><br><span class="line"><span class="comment">//      name:&#x27;cny&#x27;,</span></span><br><span class="line"><span class="comment">//      _proto_:Test.prototype   </span></span><br><span class="line"><span class="comment">//   &#125;</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p><strong>callee、caller</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">arguments</span>.<span class="property">callee</span>    <span class="comment">//引用该函数体当前正在执行的函数   严格模式已删除</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sum = (<span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt;= <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> n + <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(n - <span class="number">1</span>)</span><br><span class="line">&#125;)(n);</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>.<span class="property">caller</span>     <span class="comment">//返回调用当前function函数的函数引用</span></span><br></pre></td></tr></table></figure><p><strong>typeof</strong></p><ul><li>object | function | number | string | boolean | undefined</li><li>obect里面包含null  |  历史遗留问题</li><li>{}  != {}  |  引用值对比的是地址</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">obj1 = obj</span><br><span class="line">obj1 == obj</span><br></pre></td></tr></table></figure><p><strong>三元运算符</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">条件 ? 运算<span class="number">1</span> ：运算<span class="number">2</span></span><br></pre></td></tr></table></figure><p><strong>克隆</strong></p><ul><li>浅拷贝</li><li>创建的新对象会影响旧对象内的属性值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;cny&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj2 = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    obj2[key] = obj[key]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">origin，target</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> tar = target || &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> origin)&#123;</span><br><span class="line">        <span class="comment">//剔除原型上的属性</span></span><br><span class="line">        <span class="keyword">if</span>(origin.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">    target[key] = origin[key]</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> tar</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>深拷贝</li><li>创建的新对象不会影响旧对象内的属性值</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">origin,target</span>)&#123;</span><br><span class="line"><span class="keyword">var</span> tar = target || &#123;&#125;,</span><br><span class="line">    toStr = <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>,</span><br><span class="line">    arrType = <span class="string">&#x27;[Object Array]&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> origin)&#123;</span><br><span class="line">        <span class="keyword">if</span>(origin.<span class="title function_">hasOwnProperty</span>(key))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_">typeof</span>(origin[key] === <span class="string">&#x27;object&#x27;</span>) &amp;&amp; origin[key] !== <span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="keyword">if</span>(toStr.<span class="title function_">call</span>(<span class="params">origin[key] === arrType</span>)&#123;</span><br><span class="line">                   target[key] = []</span><br><span class="line">                   &#125;)<span class="keyword">else</span>&#123;</span><br><span class="line">                   target[key] = &#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line">            <span class="title function_">deepClone</span>(origin[key],origin[key])</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            target[key] = origin[key]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> target</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;原型与原型链&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;所有对象都有自己的原型，包括原型本身&lt;/li&gt;
&lt;li&gt;原型链的顶端 -&amp;gt; Object.prototype&lt;/li&gt;
&lt;li&gt;普通函数不写返回值  默认return  undefined&lt;/li&gt;
&lt;li&gt;构造函数实例化以后返回的就是this&lt;/li&gt;
&lt;li&gt;&lt;code&gt;_proto_&lt;/code&gt;：构造函数实例化出来的对象永远指向构造函数的原型对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;constructor&lt;/code&gt;:指向创建自己的那个构造函数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;prototype&lt;/code&gt;:每个函数都会有这么一个属性,这个属性指向一个对象,这个对象就叫做原型对象&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/08/23/Hitokoto1-2/"/>
    <id>http://example.com/2022/08/23/Hitokoto1-2/</id>
    <published>2022-08-23T13:54:55.000Z</published>
    <updated>2022-08-23T14:02:17.238Z</updated>
    
    <content type="html"><![CDATA[<p>人终其一生都是自我改善的过程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;人终其一生都是自我改善的过程。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Javascript</title>
    <link href="http://example.com/2022/08/23/Javascript1-1/"/>
    <id>http://example.com/2022/08/23/Javascript1-1/</id>
    <published>2022-08-23T13:33:21.000Z</published>
    <updated>2022-08-24T13:44:02.818Z</updated>
    
    <content type="html"><![CDATA[<p><strong>堆栈</strong></p><ul><li>栈: 存储js的基本数据类型  undefined null string number boolean</li><li>堆: 存储js的引用数据类型  function object  array 引用类型的数据的地址指针是存储在栈中的，要访问引用类型的值的时候，需要先从栈中获取对象的地址指针，然后通过地址指针找到堆中存储的数据</li><li>栈  线性结构 后进后出  堆  方便存储和开辟内存空间</li></ul><p><strong>typeof()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">typeof</span>(<span class="title function_">typeof</span>(<span class="number">123</span>))  =&gt; string   <span class="comment">//任何typeof typeOf 都是string</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>类型转换</strong></p><ul><li>显示类型转换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>)    <span class="comment">//number</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;true&#x27;</span>)   <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>)     <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">false</span>)    <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>)     <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;3.14&#x27;</span>)   <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">//number</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">true</span>)  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">false</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">null</span>)  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">undefined</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">NaN</span>)   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3.99&#x27;</span>) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;abc123&#x27;</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123abc&#x27;</span>)<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> | <span class="literal">undefined</span>  没有<span class="title function_">toString</span>()方法</span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span></span><br><span class="line"><span class="literal">undefined</span> | <span class="literal">null</span> | <span class="title class_">NaN</span> | <span class="string">&quot;&quot;</span> | <span class="number">0</span>  <span class="literal">false</span>  <span class="comment">//其他都是true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a =<span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>    <span class="comment">//不进行隐式转换</span></span><br><span class="line"><span class="comment">//NaN不等于任何数值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">//false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;a&#x27;</span>)    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>)   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>隐式类型转换</li></ul><p><strong>function</strong></p><ul><li>高内聚，低耦合  -&gt;  模块的单一责任制</li><li>函数声明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数名的命名规则<ul><li>不能数字开头</li><li>字母 _$</li><li>包含数字</li><li>小驼峰命名法   myMethods()</li></ul></li><li>匿名函数表达式    函数字面量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">test1</span>()  <span class="comment">//test1函数内部可调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部调用test()</span></span><br></pre></td></tr></table></figure><ul><li><p>形参和实参数量可不等</p></li><li><p>js引擎默认隐式添加return</p><ul><li>终止函数执行</li></ul></li></ul><p><strong>递归</strong></p><ul><li>函数自己调用自己    |    性能问题<ul><li>规律</li><li>出口</li></ul></li></ul><p><strong>预编译</strong></p><ul><li><p>1.检查通篇的语法错误</p></li><li><p>1.5预编译的过程</p></li><li><p>2.解释一行，执行一行</p></li><li><p>函数声明整体提升，变量只有声明提升，赋值是不提升</p></li><li><p>暗示全局变量      imply global variable</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">// a = window/a</span></span><br></pre></td></tr></table></figure><ul><li>AO  activitive object   活跃对象  函数上下文</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> = &#123;</span><br><span class="line"><span class="comment">//寻找函数里的形参和变量声明</span></span><br><span class="line">    <span class="comment">//把实参赋值给形参</span></span><br><span class="line">    <span class="comment">//寻找函数体的声明 赋值函数体</span></span><br><span class="line">    <span class="comment">//执行函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GO global object 全局上下文</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GO</span>&#123;</span><br><span class="line"><span class="comment">//找变量</span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数内部没有var提升到全局中</span></span><br><span class="line"><span class="comment">//预编译只看是否有变量声明和函数声明</span></span><br></pre></td></tr></table></figure><p><strong>函数</strong></p><ul><li>函数也是一种对象类型  引用类型  引用值</li></ul><p>对象</p><ul><li>有些属性是我们无法访问的</li><li>JS引擎内部固有的隐式属性</li></ul><p><strong>[[scope]]</strong></p><ul><li>函数创建时，生成的一个JS内部的隐式属性</li><li>函数存储作用域链的容器，作用域链<ul><li>AO/GO</li><li>AO  函数的执行器上下文   当函数被执行时前一刻</li><li>GO  全局的执行器上下文</li><li>函数执行完成以后，AO是要销毁的</li><li>AO是一个即时存储容器</li></ul></li></ul><p><strong>闭包</strong></p><ul><li><p>return 一个值就是引用</p></li><li><p>当内部函数被返回到外部并保存时,一定会产生闭包,闭包会产生原来的作用域链不释放，过度的闭包可能会导致内存泄露，或加载过慢</p></li><li><p>闭包在ECMA262上的定义：当一个函数被系统创建时，闭包就会被一同创建出来</p></li><li><p>一个函数统一与外界环境(作用域)捆版在一起的，这种现象叫做闭包</p></li><li><p>更高的封装性和集成性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//global scope -&gt; 闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;  <span class="comment">//闭包函数</span></span><br><span class="line"><span class="comment">//fn test1 + test scope -&gt; 形成闭包</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test1</span> ()&#123;  <span class="comment">//闭包函数</span></span><br><span class="line">        <span class="comment">// closure -&gt; close 关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><ul><li><p>IIFE - immediately-invoked  function expression</p></li><li><p>自动执行，执行完成以后立即释放</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;());    <span class="comment">//W3C建议(function()&#123;&#125;)();//表达式才能被执行符号执行//函数名自动被忽略</span></span><br></pre></td></tr></table></figure><ul><li>函数声明变成表达式的方法 + - ！ || &amp;&amp;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>，<span class="number">2</span>）  <span class="comment">//返回的是2  逗号运算符 返回后面那一个</span></span><br></pre></td></tr></table></figure><p><strong>Object</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">sth</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">fn</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象字面量</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;cny&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">//系统自带的构造函数</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()   <span class="comment">//与对象字面量相等</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义构造函数</span></span><br><span class="line"><span class="comment">//大驼峰  与普通函数区分</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//return this    系统自动隐式return this </span></span><br><span class="line">    <span class="comment">//return 原始值  number | boolean | string | undefined | null  this将不会改变</span></span><br><span class="line">    <span class="comment">//return 引用值  function | &#123;&#125; | []  return什么返回什么</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> <span class="title class_">Fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//new之前 构造函数的this指向window  | 构造函数本身</span></span><br><span class="line"><span class="comment">//new实例化后 this指向实例化出来的实例对象包装类</span></span><br></pre></td></tr></table></figure><p><strong>包装类</strong></p><ul><li><p>原始值没有自己的方法和属性</p></li><li><p>原始值通过构造函数实例化之后可以添加属性和方法</p></li><li><p>undefined 和 null  不可以设置任何的属性和方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS包装类</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a.<span class="property">len</span> = <span class="number">3</span></span><br><span class="line"><span class="comment">//new Number(123).len = 3; delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)  <span class="comment">// console.log(new String(str).length)  包装类</span></span><br></pre></td></tr></table></figure><p>ASCII码  表1 0 - 127  表2  128 - 255  1个字节  byte</p><p>UNICODE码  涵盖ASCII码  2个字节  charCodeAt()</p><p><strong>Prototype</strong></p><ul><li><p>构造函数实例化出来的对象永远指向构造函数的原型对象</p></li><li><p>prototype.constructor -&gt; 构造函数本身</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">this</span> = &#123;</span><br><span class="line"><span class="attr">_proto_</span>:<span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>    <span class="comment">//_proto_  键值对的键名</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引号最好使用单引号，双引号有可能造成后端转译冲突</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止变量污染  立即执行函数  插件封装</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Test</span> = <span class="title class_">Test</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br></pre></td></tr></table></figure><p><strong>高阶函数</strong></p><ul><li>闭包 + 回调 -&gt; 高阶函数</li><li>回调<ul><li>callback -&gt; 回应 -&gt; 通讯的回应</li><li>call -&gt; 调用 行为</li><li>trigger -&gt; 出发 -&gt; 事件的发生</li><li>CALL -&gt; Function  |  Trigger -&gt; Event</li><li>event -&gt; 通过一个程序或者是交互被处罚 -&gt; 执行相应的处理程序</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;堆栈&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈: 存储js的基本数据类型  undefined null string number boolean&lt;/li&gt;
&lt;li&gt;堆: 存储js的引用数据类型  function object  array 引用类型的数据的地址指针是存储在栈中的，要访问引用类型的值的时候，需要先从栈中获取对象的地址指针，然后通过地址指针找到堆中存储的数据&lt;/li&gt;
&lt;li&gt;栈  线性结构 后进后出  堆  方便存储和开辟内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;typeof()&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;))  =&amp;gt; string   &lt;span class=&quot;comment&quot;&gt;//任何typeof typeOf 都是string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/08/22/Hitokoto1-1/"/>
    <id>http://example.com/2022/08/22/Hitokoto1-1/</id>
    <published>2022-08-22T13:36:33.000Z</published>
    <updated>2022-08-24T13:45:31.061Z</updated>
    
    <content type="html"><![CDATA[<p>弱小和无知，都不是生存的障碍，傲慢才是。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;弱小和无知，都不是生存的障碍，傲慢才是。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>起笔</title>
    <link href="http://example.com/2022/08/22/hello-world/"/>
    <id>http://example.com/2022/08/22/hello-world/</id>
    <published>2022-08-22T08:51:25.526Z</published>
    <updated>2022-08-22T09:45:57.813Z</updated>
    
    <content type="html"><![CDATA[<p>22年盛夏里，某个平凡的傍晚</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;22年盛夏里，某个平凡的傍晚&lt;/p&gt;
</summary>
      
    
    
    
    <category term="起笔" scheme="http://example.com/categories/%E8%B5%B7%E7%AC%94/"/>
    
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>CavsCy&#39;s Blog</title>
  
  <subtitle>改变的确很难,但结果值得冒险</subtitle>
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-08-24T01:57:25.693Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>1Chen1y1111</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Javascript</title>
    <link href="http://example.com/2022/08/24/Javascript/"/>
    <id>http://example.com/2022/08/24/Javascript/</id>
    <published>2022-08-24T01:06:32.000Z</published>
    <updated>2022-08-24T01:57:25.693Z</updated>
    
    <content type="html"><![CDATA[<p><strong>堆栈</strong></p><ul><li>栈: 存储js的基本数据类型  undefined null string number boolean</li><li>堆: 存储js的引用数据类型  function object  array 引用类型的数据的地址指针是存储在栈中的，要访问引用类型的值的时候，需要先从栈中获取对象的地址指针，然后通过地址指针找到堆中存储的数据</li><li>栈  线性结构 后进后出  堆  方便存储和开辟内存空间</li></ul><p><strong>typeof()</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">typeof</span>(<span class="title function_">typeof</span>(<span class="number">123</span>))  =&gt; string   <span class="comment">//任何typeof typeOf 都是string</span></span><br></pre></td></tr></table></figure><span id="more"></span><p><strong>类型转换</strong></p><ul><li>显示类型转换</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;123&#x27;</span>)    <span class="comment">//number</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;true&#x27;</span>)   <span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">true</span>)     <span class="comment">//1</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">false</span>)    <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">null</span>)     <span class="comment">//0</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="literal">undefined</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="title class_">Number</span>(<span class="string">&#x27;3.14&#x27;</span>)   <span class="comment">//number</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123&#x27;</span>) <span class="comment">//number</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">true</span>)  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">false</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">null</span>)  <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="literal">undefined</span>) <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">NaN</span>)   <span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3.99&#x27;</span>) <span class="comment">//3</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;abc123&#x27;</span>)<span class="comment">//NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;123abc&#x27;</span>)<span class="comment">//123</span></span><br><span class="line"></span><br><span class="line"><span class="literal">null</span> | <span class="literal">undefined</span>  没有<span class="title function_">toString</span>()方法</span><br><span class="line"></span><br><span class="line"><span class="title class_">Boolean</span></span><br><span class="line"><span class="literal">undefined</span> | <span class="literal">null</span> | <span class="title class_">NaN</span> | <span class="string">&quot;&quot;</span> | <span class="number">0</span>  <span class="literal">false</span>  <span class="comment">//其他都是true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> a =<span class="number">1</span> === <span class="string">&#x27;1&#x27;</span>    <span class="comment">//不进行隐式转换</span></span><br><span class="line"><span class="comment">//NaN不等于任何数值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;123&#x27;</span>)  <span class="comment">//false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="string">&#x27;a&#x27;</span>)    <span class="comment">//true</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">null</span>)   <span class="comment">//false</span></span><br><span class="line"><span class="built_in">isNaN</span>(<span class="literal">undefined</span>) <span class="comment">//true</span></span><br></pre></td></tr></table></figure><ul><li>隐式类型转换</li></ul><p><strong>function</strong></p><ul><li>高内聚，低耦合  -&gt;  模块的单一责任制</li><li>函数声明</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>函数名的命名规则<ul><li>不能数字开头</li><li>字母 _$</li><li>包含数字</li><li>小驼峰命名法   myMethods()</li></ul></li><li>匿名函数表达式    函数字面量</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> test = <span class="keyword">function</span> <span class="title function_">test1</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)</span><br><span class="line"><span class="title function_">test1</span>()  <span class="comment">//test1函数内部可调用</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//外部调用test()</span></span><br></pre></td></tr></table></figure><ul><li><p>形参和实参数量可不等</p></li><li><p>js引擎默认隐式添加return</p><ul><li>终止函数执行</li></ul></li></ul><p><strong>递归</strong></p><ul><li>函数自己调用自己    |    性能问题<ul><li>规律</li><li>出口</li></ul></li></ul><p><strong>预编译</strong></p><ul><li><p>1.检查通篇的语法错误</p></li><li><p>1.5预编译的过程</p></li><li><p>2.解释一行，执行一行</p></li><li><p>函数声明整体提升，变量只有声明提升，赋值是不提升</p></li><li><p>暗示全局变量      imply global variable</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">a</span>) <span class="comment">// a = window/a</span></span><br></pre></td></tr></table></figure><ul><li>AO  activitive object   活跃对象  函数上下文</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">AO</span> = &#123;</span><br><span class="line"><span class="comment">//寻找函数里的形参和变量声明</span></span><br><span class="line">    <span class="comment">//把实参赋值给形参</span></span><br><span class="line">    <span class="comment">//寻找函数体的声明 赋值函数体</span></span><br><span class="line">    <span class="comment">//执行函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>GO global object 全局上下文</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">GO</span>&#123;</span><br><span class="line"><span class="comment">//找变量</span></span><br><span class="line"><span class="comment">//函数声明</span></span><br><span class="line"><span class="comment">//执行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数内部没有var提升到全局中</span></span><br><span class="line"><span class="comment">//预编译只看是否有变量声明和函数声明</span></span><br></pre></td></tr></table></figure><p><strong>函数</strong></p><ul><li>函数也是一种对象类型  引用类型  引用值</li></ul><p>对象</p><ul><li>有些属性是我们无法访问的</li><li>JS引擎内部固有的隐式属性</li></ul><p><strong>[[scope]]</strong></p><ul><li>函数创建时，生成的一个JS内部的隐式属性</li><li>函数存储作用域链的容器，作用域链<ul><li>AO/GO</li><li>AO  函数的执行器上下文   当函数被执行时前一刻</li><li>GO  全局的执行器上下文</li><li>函数执行完成以后，AO是要销毁的</li><li>AO是一个即时存储容器</li></ul></li></ul><p><strong>闭包</strong></p><ul><li><p>return 一个值就是引用</p></li><li><p>当内部函数被返回到外部并保存时,一定会产生闭包,闭包会产生原来的作用域链不释放，过度的闭包可能会导致内存泄露，或加载过慢</p></li><li><p>闭包在ECMA262上的定义：当一个函数被系统创建时，闭包就会被一同创建出来</p></li><li><p>一个函数统一与外界环境(作用域)捆版在一起的，这种现象叫做闭包</p></li><li><p>更高的封装性和集成性</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//global scope -&gt; 闭包</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;  <span class="comment">//闭包函数</span></span><br><span class="line"><span class="comment">//fn test1 + test scope -&gt; 形成闭包</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">test1</span> ()&#123;  <span class="comment">//闭包函数</span></span><br><span class="line">        <span class="comment">// closure -&gt; close 关闭</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>立即执行函数</strong></p><ul><li><p>IIFE - immediately-invoked  function expression</p></li><li><p>自动执行，执行完成以后立即释放</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;());    <span class="comment">//W3C建议(function()&#123;&#125;)();//表达式才能被执行符号执行//函数名自动被忽略</span></span><br></pre></td></tr></table></figure><ul><li>函数声明变成表达式的方法 + - ！ || &amp;&amp;</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>，<span class="number">2</span>）  <span class="comment">//返回的是2  逗号运算符 返回后面那一个</span></span><br></pre></td></tr></table></figure><p><strong>Object</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> obj.<span class="property">sth</span></span><br><span class="line"><span class="keyword">delete</span> obj.<span class="property">fn</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//对象字面量</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;cny&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//构造函数</span></span><br><span class="line"><span class="comment">//系统自带的构造函数</span></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>()   <span class="comment">//与对象字面量相等</span></span><br><span class="line">obj.<span class="property">name</span> = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//自定义构造函数</span></span><br><span class="line"><span class="comment">//大驼峰  与普通函数区分</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="string">&#x27;cny&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//return this    系统自动隐式return this </span></span><br><span class="line">    <span class="comment">//return 原始值  number | boolean | string | undefined | null  this将不会改变</span></span><br><span class="line">    <span class="comment">//return 引用值  function | &#123;&#125; | []  return什么返回什么</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> c1 = <span class="keyword">new</span> <span class="title class_">Fn</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">//new之前 构造函数的this指向window  | 构造函数本身</span></span><br><span class="line"><span class="comment">//new实例化后 this指向实例化出来的实例对象包装类</span></span><br></pre></td></tr></table></figure><p><strong>包装类</strong></p><ul><li><p>原始值没有自己的方法和属性</p></li><li><p>原始值通过构造函数实例化之后可以添加属性和方法</p></li><li><p>undefined 和 null  不可以设置任何的属性和方法</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//JS包装类</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</span><br><span class="line">a.<span class="property">len</span> = <span class="number">3</span></span><br><span class="line"><span class="comment">//new Number(123).len = 3; delete</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="property">length</span>)  <span class="comment">// console.log(new String(str).length)  包装类</span></span><br></pre></td></tr></table></figure><p>ASCII码  表1 0 - 127  表2  128 - 255  1个字节  byte</p><p>UNICODE码  涵盖ASCII码  2个字节  charCodeAt()</p><p><strong>Prototype</strong></p><ul><li><p>构造函数实例化出来的对象永远指向构造函数的原型对象</p></li><li><p>prototype.constructor -&gt; 构造函数本身</p></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Car</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="variable language_">this</span> = &#123;</span><br><span class="line"><span class="attr">_proto_</span>:<span class="title class_">Car</span>.<span class="property"><span class="keyword">prototype</span></span>    <span class="comment">//_proto_  键值对的键名</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>引号最好使用单引号，双引号有可能造成后端转译冲突</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//防止变量污染  立即执行函数  插件封装</span></span><br><span class="line">;(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Test</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">Test</span> = <span class="title class_">Test</span></span><br><span class="line">&#125;)();</span><br><span class="line"><span class="keyword">var</span> test = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br></pre></td></tr></table></figure><p><strong>高阶函数</strong></p><ul><li>闭包 + 回调 -&gt; 高阶函数</li><li>回调<ul><li>callback -&gt; 回应 -&gt; 通讯的回应</li><li>call -&gt; 调用 行为</li><li>trigger -&gt; 出发 -&gt; 事件的发生</li><li>CALL -&gt; Function  |  Trigger -&gt; Event</li><li>event -&gt; 通过一个程序或者是交互被处罚 -&gt; 执行相应的处理程序</li></ul></li></ul>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;堆栈&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;栈: 存储js的基本数据类型  undefined null string number boolean&lt;/li&gt;
&lt;li&gt;堆: 存储js的引用数据类型  function object  array 引用类型的数据的地址指针是存储在栈中的，要访问引用类型的值的时候，需要先从栈中获取对象的地址指针，然后通过地址指针找到堆中存储的数据&lt;/li&gt;
&lt;li&gt;栈  线性结构 后进后出  堆  方便存储和开辟内存空间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;typeof()&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;title function_&quot;&gt;typeof&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;123&lt;/span&gt;))  =&amp;gt; string   &lt;span class=&quot;comment&quot;&gt;//任何typeof typeOf 都是string&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</summary>
    
    
    
    <category term="Javascript" scheme="http://example.com/categories/Javascript/"/>
    
    
    <category term="Javascript" scheme="http://example.com/tags/Javascript/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/08/23/Hitokoto1/"/>
    <id>http://example.com/2022/08/23/Hitokoto1/</id>
    <published>2022-08-23T13:54:55.000Z</published>
    <updated>2022-08-23T14:02:17.238Z</updated>
    
    <content type="html"><![CDATA[<p>人终其一生都是自我改善的过程。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;人终其一生都是自我改善的过程。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>一言</title>
    <link href="http://example.com/2022/08/22/Hitokoto/"/>
    <id>http://example.com/2022/08/22/Hitokoto/</id>
    <published>2022-08-22T13:36:33.000Z</published>
    <updated>2022-08-23T13:58:18.370Z</updated>
    
    <content type="html"><![CDATA[<p>弱小和无知，都不是生存的障碍，傲慢才是。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;弱小和无知，都不是生存的障碍，傲慢才是。&lt;/p&gt;
</summary>
      
    
    
    
    
    <category term="一言" scheme="http://example.com/tags/%E4%B8%80%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>起笔</title>
    <link href="http://example.com/2022/08/22/hello-world/"/>
    <id>http://example.com/2022/08/22/hello-world/</id>
    <published>2022-08-22T08:51:25.526Z</published>
    <updated>2022-08-22T09:45:57.813Z</updated>
    
    <content type="html"><![CDATA[<p>22年盛夏里，某个平凡的傍晚</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;22年盛夏里，某个平凡的傍晚&lt;/p&gt;
</summary>
      
    
    
    
    <category term="起笔" scheme="http://example.com/categories/%E8%B5%B7%E7%AC%94/"/>
    
    
  </entry>
  
</feed>
